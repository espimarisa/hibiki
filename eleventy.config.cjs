/* eslint-disable node/no-unpublished-require */
const eleventyPluginTinyHTML = require("@sardine/eleventy-plugin-tinyhtml");
const eleventyExternalLinks = require("eleventy-plugin-external-links");
const eleventySass = require("eleventy-sass");

const IS_PRODUCTION = process.env.NODE_ENV === "production";

// Configures tinyHTML
const tinyHTMLOptions = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: true,
  decodeEntities: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  preventAttributesEscaping: true,
  processConditionalComments: true,
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: true,
  removeOptionalTags: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortAttributes: true,
  sortClassName: true,
  trimCustomFragments: true,
  useShortDoctype: true,
};

module.exports = (eleventyConfig) => {
  // Makes all links open with noopener noreferrer
  eleventyConfig.addPlugin(eleventyExternalLinks, {
    rel: "noopener noreferrer",
    extensions: [".liquid", ".html"],
  });

  // Copy static assets
  eleventyConfig.addPassthroughCopy("./src/web/img");
  eleventyConfig.addPassthroughCopy({ "./node_modules/@fontsource/atkinson-hyperlegible/files/*.woff2": "./css/files" });

  // Sets Liquid options
  eleventyConfig.setLiquidOptions({
    dynamicPartials: true,
    strict_filters: true,
  });

  // Enables SASS support
  eleventyConfig.addPlugin(eleventySass, {
    compileOptions: {
      permalink: () => {
        return (data) => {
          // Ensures we output files to a CSS directory
          return data.page.filePathStem.replace(/^\/scss\//, "/css/") + ".css";
        };
      },
    },
    sass: {
      // Load from our SCSS folder
      loadPaths: ["./src/web/scss"],
    },
  });

  // Minify HTML if we're running in production
  if (IS_PRODUCTION) eleventyConfig.addPlugin(eleventyPluginTinyHTML, tinyHTMLOptions);

  return {
    dir: {
      input: "./src/web",
      output: "./_site/",
      includes: "_includes",
      layouts: "_layouts",
    },
  };
};
